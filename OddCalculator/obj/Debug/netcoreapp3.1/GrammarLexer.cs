//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mbry_dell\Desktop\AJF_1\OddCalculator\Grammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OddCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	public const int
		WhiteSpace=1, NewLine=2, Add=3, Subtract=4, Multiply=5, Divide=6, Pow=7, 
		MultiMultiply=8, Modulo=9, Ceiling=10, Floor=11, LB=12, RB=13, SQRT=14, 
		Round=15, Min=16, Max=17, Comma=18, Factorial=19, Log=20, Logn=21, Exp=22, 
		Abs=23, Help=24, OctNumber=25, DecNumber=26, HexNumber=27, Colon=28;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SINGLE_SPACE", "TABULATION", "LINE_FEED", "CARRAIGE_RETURN", "WhiteSpace", 
		"NewLine", "Add", "Subtract", "Multiply", "Divide", "Colon", "Pow", "MultiMultiply", 
		"Modulo", "Ceiling", "Floor", "LB", "RB", "SQRT", "Round", "Min", "Max", 
		"Comma", "Factorial", "Log", "Logn", "Exp", "Abs", "Help", "OctNumber", 
		"DecNumber", "HexNumber"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'**'", "'%'", null, 
		"'_'", "'('", "')'", "'sqrt'", "'round'", "'min'", "'max'", "','", "'!'", 
		"'log'", "'logn'", "'exp'", "'abs'", "'help'", null, null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WhiteSpace", "NewLine", "Add", "Subtract", "Multiply", "Divide", 
		"Pow", "MultiMultiply", "Modulo", "Ceiling", "Floor", "LB", "RB", "SQRT", 
		"Round", "Min", "Max", "Comma", "Factorial", "Log", "Logn", "Exp", "Abs", 
		"Help", "OctNumber", "DecNumber", "HexNumber", "Colon"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1E\xC4\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x6\x6N\n\x6\r\x6\xE\x6O\x3\x6\x3\x6\x3\a\x3\a\x6\aV\n\a\r\a\xE\aW\x3"+
		"\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F"+
		"\a\x1F\xA6\n\x1F\f\x1F\xE\x1F\xA9\v\x1F\x3\x1F\x3\x1F\x3 \a \xAE\n \f"+
		" \xE \xB1\v \x3 \a \xB4\n \f \xE \xB7\v \x3 \x3 \x3!\x3!\x3!\a!\xBE\n"+
		"!\f!\xE!\xC1\v!\x3!\x3!\x2\x2\x2\"\x3\x2\x2\x5\x2\x2\a\x2\x2\t\x2\x2\v"+
		"\x2\x3\r\x2\x4\xF\x2\x5\x11\x2\x6\x13\x2\a\x15\x2\b\x17\x2\x1E\x19\x2"+
		"\t\x1B\x2\n\x1D\x2\v\x1F\x2\f!\x2\r#\x2\xE%\x2\xF\'\x2\x10)\x2\x11+\x2"+
		"\x12-\x2\x13/\x2\x14\x31\x2\x15\x33\x2\x16\x35\x2\x17\x37\x2\x18\x39\x2"+
		"\x19;\x2\x1A=\x2\x1B?\x2\x1C\x41\x2\x1D\x3\x2\f\x3\x2))\x3\x2\x32\x32"+
		"\x3\x2\x32\x39\x6\x2\x33\x33\x35\x35\x37\x37\x39\x39\x3\x2\x33;\x3\x2"+
		"\x32;\a\x2\x33\x33\x35\x35\x37\x37\x39\x39;;\x3\x2zz\x4\x2\x32;\x43H\n"+
		"\x2\x33\x33\x35\x35\x37\x37\x39\x39;;\x44\x44\x46\x46HH\xC7\x2\v\x3\x2"+
		"\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3"+
		"\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2"+
		"\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2"+
		"\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+"+
		"\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33"+
		"\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2"+
		"\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x3"+
		"\x43\x3\x2\x2\x2\x5\x45\x3\x2\x2\x2\aG\x3\x2\x2\x2\tI\x3\x2\x2\x2\vM\x3"+
		"\x2\x2\x2\rU\x3\x2\x2\x2\xF[\x3\x2\x2\x2\x11]\x3\x2\x2\x2\x13_\x3\x2\x2"+
		"\x2\x15\x61\x3\x2\x2\x2\x17\x63\x3\x2\x2\x2\x19g\x3\x2\x2\x2\x1Bi\x3\x2"+
		"\x2\x2\x1Dl\x3\x2\x2\x2\x1Fn\x3\x2\x2\x2!p\x3\x2\x2\x2#r\x3\x2\x2\x2%"+
		"t\x3\x2\x2\x2\'v\x3\x2\x2\x2){\x3\x2\x2\x2+\x81\x3\x2\x2\x2-\x85\x3\x2"+
		"\x2\x2/\x89\x3\x2\x2\x2\x31\x8B\x3\x2\x2\x2\x33\x8D\x3\x2\x2\x2\x35\x91"+
		"\x3\x2\x2\x2\x37\x96\x3\x2\x2\x2\x39\x9A\x3\x2\x2\x2;\x9E\x3\x2\x2\x2"+
		"=\xA3\x3\x2\x2\x2?\xAF\x3\x2\x2\x2\x41\xBA\x3\x2\x2\x2\x43\x44\a\"\x2"+
		"\x2\x44\x4\x3\x2\x2\x2\x45\x46\a\v\x2\x2\x46\x6\x3\x2\x2\x2GH\a\f\x2\x2"+
		"H\b\x3\x2\x2\x2IJ\a\xF\x2\x2J\n\x3\x2\x2\x2KN\x5\x3\x2\x2LN\x5\x5\x3\x2"+
		"MK\x3\x2\x2\x2ML\x3\x2\x2\x2NO\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2"+
		"PQ\x3\x2\x2\x2QR\b\x6\x2\x2R\f\x3\x2\x2\x2SV\x5\t\x5\x2TV\x5\a\x4\x2U"+
		"S\x3\x2\x2\x2UT\x3\x2\x2\x2VW\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2"+
		"XY\x3\x2\x2\x2YZ\b\a\x2\x2Z\xE\x3\x2\x2\x2[\\\a-\x2\x2\\\x10\x3\x2\x2"+
		"\x2]^\a/\x2\x2^\x12\x3\x2\x2\x2_`\a,\x2\x2`\x14\x3\x2\x2\x2\x61\x62\a"+
		"\x31\x2\x2\x62\x16\x3\x2\x2\x2\x63\x64\a<\x2\x2\x64\x65\x3\x2\x2\x2\x65"+
		"\x66\b\f\x3\x2\x66\x18\x3\x2\x2\x2gh\a`\x2\x2h\x1A\x3\x2\x2\x2ij\a,\x2"+
		"\x2jk\a,\x2\x2k\x1C\x3\x2\x2\x2lm\a\'\x2\x2m\x1E\x3\x2\x2\x2no\t\x2\x2"+
		"\x2o \x3\x2\x2\x2pq\a\x61\x2\x2q\"\x3\x2\x2\x2rs\a*\x2\x2s$\x3\x2\x2\x2"+
		"tu\a+\x2\x2u&\x3\x2\x2\x2vw\au\x2\x2wx\as\x2\x2xy\at\x2\x2yz\av\x2\x2"+
		"z(\x3\x2\x2\x2{|\at\x2\x2|}\aq\x2\x2}~\aw\x2\x2~\x7F\ap\x2\x2\x7F\x80"+
		"\a\x66\x2\x2\x80*\x3\x2\x2\x2\x81\x82\ao\x2\x2\x82\x83\ak\x2\x2\x83\x84"+
		"\ap\x2\x2\x84,\x3\x2\x2\x2\x85\x86\ao\x2\x2\x86\x87\a\x63\x2\x2\x87\x88"+
		"\az\x2\x2\x88.\x3\x2\x2\x2\x89\x8A\a.\x2\x2\x8A\x30\x3\x2\x2\x2\x8B\x8C"+
		"\a#\x2\x2\x8C\x32\x3\x2\x2\x2\x8D\x8E\an\x2\x2\x8E\x8F\aq\x2\x2\x8F\x90"+
		"\ai\x2\x2\x90\x34\x3\x2\x2\x2\x91\x92\an\x2\x2\x92\x93\aq\x2\x2\x93\x94"+
		"\ai\x2\x2\x94\x95\ap\x2\x2\x95\x36\x3\x2\x2\x2\x96\x97\ag\x2\x2\x97\x98"+
		"\az\x2\x2\x98\x99\ar\x2\x2\x99\x38\x3\x2\x2\x2\x9A\x9B\a\x63\x2\x2\x9B"+
		"\x9C\a\x64\x2\x2\x9C\x9D\au\x2\x2\x9D:\x3\x2\x2\x2\x9E\x9F\aj\x2\x2\x9F"+
		"\xA0\ag\x2\x2\xA0\xA1\an\x2\x2\xA1\xA2\ar\x2\x2\xA2<\x3\x2\x2\x2\xA3\xA7"+
		"\t\x3\x2\x2\xA4\xA6\t\x4\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2"+
		"\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAA\x3\x2\x2\x2\xA9\xA7\x3"+
		"\x2\x2\x2\xAA\xAB\t\x5\x2\x2\xAB>\x3\x2\x2\x2\xAC\xAE\t\x6\x2\x2\xAD\xAC"+
		"\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2"+
		"\x2\xB0\xB5\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB4\t\a\x2\x2\xB3\xB2"+
		"\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2"+
		"\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\t\b\x2\x2\xB9@\x3"+
		"\x2\x2\x2\xBA\xBB\t\x3\x2\x2\xBB\xBF\t\t\x2\x2\xBC\xBE\t\n\x2\x2\xBD\xBC"+
		"\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2"+
		"\x2\xC0\xC2\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC3\t\v\x2\x2\xC3\x42"+
		"\x3\x2\x2\x2\v\x2MOUW\xA7\xAF\xB5\xBF\x4\b\x2\x2\t\b\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace OddCalculator
