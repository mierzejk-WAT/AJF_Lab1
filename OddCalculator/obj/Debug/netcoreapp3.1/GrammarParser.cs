//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mbry_dell\Desktop\AJF_1\OddCalculator\Grammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OddCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		WhiteSpace=1, NewLine=2, Add=3, Subtract=4, Multiply=5, Divide=6, Pow=7, 
		MultiMultiply=8, Modulo=9, Ceiling=10, Floor=11, LB=12, RB=13, SQRT=14, 
		Round=15, Min=16, Max=17, Comma=18, Factorial=19, Log=20, Logn=21, Exp=22, 
		Abs=23, Help=24, OctNumber=25, DecNumber=26, HexNumber=27, Colon=28;
	public const int
		RULE_number = 0, RULE_operation = 1;
	public static readonly string[] ruleNames = {
		"number", "operation"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'**'", "'%'", null, 
		"'_'", "'('", "')'", "'sqrt'", "'round'", "'min'", "'max'", "','", "'!'", 
		"'log'", "'logn'", "'exp'", "'abs'", "'help'", null, null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WhiteSpace", "NewLine", "Add", "Subtract", "Multiply", "Divide", 
		"Pow", "MultiMultiply", "Modulo", "Ceiling", "Floor", "LB", "RB", "SQRT", 
		"Round", "Min", "Max", "Comma", "Factorial", "Log", "Logn", "Exp", "Abs", 
		"Help", "OctNumber", "DecNumber", "HexNumber", "Colon"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode OctNumber() { return GetToken(GrammarParser.OctNumber, 0); }
		public ITerminalNode DecNumber() { return GetToken(GrammarParser.DecNumber, 0); }
		public ITerminalNode HexNumber() { return GetToken(GrammarParser.HexNumber, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OctNumber) | (1L << DecNumber) | (1L << HexNumber))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public IToken op;
		public ITerminalNode Help() { return GetToken(GrammarParser.Help, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode LB() { return GetToken(GrammarParser.LB, 0); }
		public ITerminalNode RB() { return GetToken(GrammarParser.RB, 0); }
		public ITerminalNode Subtract() { return GetToken(GrammarParser.Subtract, 0); }
		public ITerminalNode Pow() { return GetToken(GrammarParser.Pow, 0); }
		public ITerminalNode SQRT() { return GetToken(GrammarParser.SQRT, 0); }
		public ITerminalNode MultiMultiply() { return GetToken(GrammarParser.MultiMultiply, 0); }
		public ITerminalNode Multiply() { return GetToken(GrammarParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(GrammarParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(GrammarParser.Modulo, 0); }
		public ITerminalNode Add() { return GetToken(GrammarParser.Add, 0); }
		public ITerminalNode Floor() { return GetToken(GrammarParser.Floor, 0); }
		public ITerminalNode Ceiling() { return GetToken(GrammarParser.Ceiling, 0); }
		public ITerminalNode Round() { return GetToken(GrammarParser.Round, 0); }
		public ITerminalNode Exp() { return GetToken(GrammarParser.Exp, 0); }
		public ITerminalNode Abs() { return GetToken(GrammarParser.Abs, 0); }
		public ITerminalNode Logn() { return GetToken(GrammarParser.Logn, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode Log() { return GetToken(GrammarParser.Log, 0); }
		public ITerminalNode Comma() { return GetToken(GrammarParser.Comma, 0); }
		public ITerminalNode Min() { return GetToken(GrammarParser.Min, 0); }
		public ITerminalNode Max() { return GetToken(GrammarParser.Max, 0); }
		public ITerminalNode Factorial() { return GetToken(GrammarParser.Factorial, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		return operation(0);
	}

	private OperationContext operation(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		OperationContext _localctx = new OperationContext(_ctx, _parentState);
		OperationContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_operation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Help:
				{
				State = 7; _localctx.op = Match(Help);
				}
				break;
			case LB:
				{
				State = 8; _localctx.op = Match(LB);
				State = 9; operation(0);
				State = 10; _localctx.op = Match(RB);
				}
				break;
			case Subtract:
				{
				State = 12; _localctx.op = Match(Subtract);
				State = 13; operation(14);
				}
				break;
			case SQRT:
				{
				State = 14; _localctx.op = Match(SQRT);
				State = 15; operation(12);
				}
				break;
			case Exp:
				{
				State = 16; _localctx.op = Match(Exp);
				State = 17; operation(7);
				}
				break;
			case Abs:
				{
				State = 18; _localctx.op = Match(Abs);
				State = 19; operation(6);
				}
				break;
			case Logn:
				{
				State = 20; _localctx.op = Match(Logn);
				State = 21; operation(5);
				}
				break;
			case Log:
				{
				State = 22; _localctx.op = Match(Log);
				State = 23; number();
				State = 24; Match(LB);
				State = 25; operation(0);
				State = 26; Match(RB);
				}
				break;
			case Min:
			case Max:
				{
				State = 28;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==Min || _la==Max) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 29; Match(LB);
				State = 30; operation(0);
				State = 31; Match(Comma);
				State = 32; operation(0);
				State = 33; Match(RB);
				}
				break;
			case OctNumber:
			case DecNumber:
			case HexNumber:
				{
				State = 35; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 55;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 53;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 38;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 39; _localctx.op = Match(Pow);
						State = 40; operation(14);
						}
						break;

					case 2:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 41;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 42;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 43; operation(11);
						}
						break;

					case 3:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 44;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 45;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==Add || _la==Subtract) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 46; operation(10);
						}
						break;

					case 4:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 47;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 48; _localctx.op = Match(MultiMultiply);
						}
						break;

					case 5:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 49;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 50;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Ceiling) | (1L << Floor) | (1L << Round))) != 0)) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 6:
						{
						_localctx = new OperationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_operation);
						State = 51;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 52; _localctx.op = Match(Factorial);
						}
						break;
					}
					} 
				}
				State = 57;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return operation_sempred((OperationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool operation_sempred(OperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 13);

		case 1: return Precpred(_ctx, 10);

		case 2: return Precpred(_ctx, 9);

		case 3: return Precpred(_ctx, 11);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E=\x4\x2\t\x2"+
		"\x4\x3\t\x3\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3"+
		"\'\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x38\n\x3\f\x3\xE\x3;\v\x3\x3\x3\x2\x2"+
		"\x3\x4\x4\x2\x2\x4\x2\x2\a\x3\x2\x1B\x1D\x3\x2\x12\x13\x4\x2\a\b\v\v\x3"+
		"\x2\x5\x6\x4\x2\f\r\x11\x11I\x2\x6\x3\x2\x2\x2\x4&\x3\x2\x2\x2\x6\a\t"+
		"\x2\x2\x2\a\x3\x3\x2\x2\x2\b\t\b\x3\x1\x2\t\'\a\x1A\x2\x2\n\v\a\xE\x2"+
		"\x2\v\f\x5\x4\x3\x2\f\r\a\xF\x2\x2\r\'\x3\x2\x2\x2\xE\xF\a\x6\x2\x2\xF"+
		"\'\x5\x4\x3\x10\x10\x11\a\x10\x2\x2\x11\'\x5\x4\x3\xE\x12\x13\a\x18\x2"+
		"\x2\x13\'\x5\x4\x3\t\x14\x15\a\x19\x2\x2\x15\'\x5\x4\x3\b\x16\x17\a\x17"+
		"\x2\x2\x17\'\x5\x4\x3\a\x18\x19\a\x16\x2\x2\x19\x1A\x5\x2\x2\x2\x1A\x1B"+
		"\a\xE\x2\x2\x1B\x1C\x5\x4\x3\x2\x1C\x1D\a\xF\x2\x2\x1D\'\x3\x2\x2\x2\x1E"+
		"\x1F\t\x3\x2\x2\x1F \a\xE\x2\x2 !\x5\x4\x3\x2!\"\a\x14\x2\x2\"#\x5\x4"+
		"\x3\x2#$\a\xF\x2\x2$\'\x3\x2\x2\x2%\'\x5\x2\x2\x2&\b\x3\x2\x2\x2&\n\x3"+
		"\x2\x2\x2&\xE\x3\x2\x2\x2&\x10\x3\x2\x2\x2&\x12\x3\x2\x2\x2&\x14\x3\x2"+
		"\x2\x2&\x16\x3\x2\x2\x2&\x18\x3\x2\x2\x2&\x1E\x3\x2\x2\x2&%\x3\x2\x2\x2"+
		"\'\x39\x3\x2\x2\x2()\f\xF\x2\x2)*\a\t\x2\x2*\x38\x5\x4\x3\x10+,\f\f\x2"+
		"\x2,-\t\x4\x2\x2-\x38\x5\x4\x3\r./\f\v\x2\x2/\x30\t\x5\x2\x2\x30\x38\x5"+
		"\x4\x3\f\x31\x32\f\r\x2\x2\x32\x38\a\n\x2\x2\x33\x34\f\n\x2\x2\x34\x38"+
		"\t\x6\x2\x2\x35\x36\f\x4\x2\x2\x36\x38\a\x15\x2\x2\x37(\x3\x2\x2\x2\x37"+
		"+\x3\x2\x2\x2\x37.\x3\x2\x2\x2\x37\x31\x3\x2\x2\x2\x37\x33\x3\x2\x2\x2"+
		"\x37\x35\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2"+
		"\x2:\x5\x3\x2\x2\x2;\x39\x3\x2\x2\x2\x5&\x37\x39";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace OddCalculator
